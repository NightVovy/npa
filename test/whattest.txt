matrix: 原版本的matrix但是换了方式输出。目前matrix3还是老问题，在找问题，应该问题出在取值区间和公式不对。

functions: 集合了一些常用功能，目前只有量子测量。

test4: 验证那个b三次多项式的解，说了很多次了这个就没有实数解。

https://colab.research.google.com/drive/1pvb7d3WbctnNwEXC5UpqOKjwhbm0jPqF#scrollTo=o91j_AZlAEAR


2024.10.21 创建一个新的matrix，验证已知beta值，在Iap上
test5from m3_2: 验证pij=1，alpha=1的时候，用NPA算最大违背【结果近似（我没说是一致啊）】简单修改alpha值也是这样。
alpha的滑块暂时用不了，1没有安装求解器2没有cvxpy

2024.10.24 在test5.3上验证：p10=p11=1, p00 , p11 不相等, 最后的结果怎么样‘
注意这里alpha^2的极限，应该是4（pij=1）。
findp 是脚本...

2024.10.28
findp2 让alpha固定为1，p10=p11=1, 遍历了p00,p01从0到1的满足lambda1和problem.value差值在e-5内的情况。
结果只有一个：p00=1,p01=0.
findp3 alpha也跟着变化，但是p10=p11=1不变。
结果：非常多，并且lambda都是4.
findp4 这次让p10=p11变化，初始值为1，步长0.05
小问题：if p00 + p01 > 1:
                    continue  # 确保 p00 + p01 <= 1
这是要干啥？
注意3和4的遍历，都没带上p01.

2024.10.29
findphard.py 让p10 != p11了，是一个超级嵌套for循环遍历，效率低也得等。
纠正：没有任何意义，因为A19不对了。
checkpq.py 想到了之前为什么要让p00 = p*q的事情，于是这个代码是用来验证上面findp的结果是否满足这个定义。
【不对】不管怎么说pij求和都不能为1.
(请忽略上面两个没用的代码）
[已经丢到垃圾桶里了]
neqez.py 由于p10neqp11.py实在是太复杂太慢，于是固定了p00,p10的取值，大步长变化另外3个变量，代入A5A13的两个方程尝试计算theta和beta。
就是看起来还是很慢。（事实上是根本运行不了）


2024.10.31
想尝试A5A13能不能得到解。。。。
trysolve.py: 自己输入pij和alpha，解出beta和theta的值。然后再带回lambda里面。
(滑块版，放在了colab)
test6from5.py: 直接把trysolve和NPA放一起看了，但是这样就没法用滑块。

2024.11.4
neq2ez.py: 先自己代入pij和theta, 看看beta和alpha的结果怎么样。
懒得代入，直接上脚本循环了，有了几个数值。还没验证，在neq2.py验证和NPA的差距吧。

另外我找不到最纯粹的无约束NPA了...所以有了npaPure.py (Note: 还不够pure)
neq2.py: NPA和lambda差值还是太大了。。。。。。

2024.11.5
data Folder/nihe1.py: 尝试拟合数据...什么是拟合？

2024.11.6
findpeqWithA5.py: p10=p11=1 (以后都是1)的时候，直接遍历alpha太难找到和p的关系了，所以改成遍历theta

2024.11.13
findpeqWithA52.py: 说实话，不需要A14的lambda，因为p10=p11，没法用左下角求beta了，左下角一定是0。
是否要用量子测量验证一下结果？因为矩阵的项对应的是<A0A1B0>这样的概率值。注意A0A1B0不是A0,A1,B0简单相乘。
data_gamma： 根据data.txt输出矩阵
data_gammawith no 1.py: 想筛选没有1的矩阵，但是大失败。

2024.11.14
findpeqWithA53.py:在1的基础上增加的theta的遍历。别忘了alpha是用A5取得的。
找到了一个巨大bug：lambda1的表达式，p01全写成了p10，你个sb。
findp5.py / findp5withGamma.py: 修正后的findp.py,以及输出矩阵版本。矩阵终于没有全1了，可喜可贺。
data/data3.txt: 经过你的努力（不再是星际玩家），数据终于可以拟合了，虽然还是不知道什么是拟合。这个是findp5.py的输出。

data/nihe2.py: 尝试拟合data3.txt的数据。拟合结果请见record.md
data/nihe2_PR.py / nihe2_SVR.py: 多项式回归和支持向量机。结果见record.md

2024.11.15
findp5withneq.py: 这里的neq是不让p00=p01.结果没返回结果，看来还是只有p00=p01的时候才有返回结果。

2024.11.18
(不得不说确实龟速)现在开始下面的文件全都在test3文件夹。
calculateBeta.py: 给出p,q,theta, 用A13计算得到beta值。
calculateBeta2.py: 遍历p,q,theta. (但是你忘了用A5得到alpha 备注：在第一个版本中修改了)

2024.11.20
test2/findp5_abs.py: 输出NPA和lambda1之间的差值。
test3/
measurement2.py: 输入：beta2, cosmu1, cosmu2, theta, alpha.
calculateBeta_25.py:  没有在2版本的基础上改，只加入了alpha
Q: mu1,mu2的取值范围用不用考虑？(0, pi/4)

npaPure2.py: 在源代码的基础上，修改了pij的取值方法，为输入p,q. alpha还是直接输入不是计算。增加了输出那4个期望值。

npa_measure1.py: 尝试整合npa和测量，只在测量结果和gamma矩阵对应上的时候输出p,q,theta,beta2,alpha,cosmu1,cosmu2。顺便一提，里面错误有点多，改了但是没确认。
npa_measure2.py: 整合后发现没有结果，可能性:1. 测量没写对（我不信）2. p,q,theta取值还是不行. 3. 不知道
                 所以打算输出差值看看差多少。         至于NPA层数，还没想好2层矩阵是什么样子。
sdp_calculator.py: 懒狗文件，把超长的NPA代码写里面直接调用了。
beta_calculator.py: same as above, but for beta.

npa_measure_debug.py: 调试非for循环的整合，等把这个写对了，再去改1和2.    （事实证明只有输入没有for循环的代码很有用）
                      现在的问题在于，矩阵看起来正常，但是NPA的值和测量值对不上？
                      然后measurement1.py里面的Iap也不对。因为没有pij。

2024.11.22
measurement2_test.py: 态改成bell态，测量用的书里的测量，这个原版代码到底对不对。   是对的。
beta_calculator_test.py: 发现sinmu2八成不是负的（因为从上面的代码验证得到，A1B1的测量结果不是负的），验证一下公式求的带负号的sinmu2.....
                         呃，你应该手动加一个负号才对，因为是开平方得到的sin。
                         Original sin_mu1: 0.8297481737254854, New sin_mu1: 0.8297481737254855
                         Original sin_mu2: 0.5468862510172947, New sin_mu2: -0.5468862510172947(我就知道)

2024.11.25
measurement2_test2.py: 直接测量，但是A1B1还不是负的(取负值应该是参数的关系......)。
npa_measure2_5.py: 正确的遍历p,q,theta,输出结果到npa_measure2_5data.txt里面。
npa_measure2_6.py: 从上面那个代码得出q = 0.5 only，所以只遍历p和theta，并缩小了步长，输出到npa_measure2_6data.txt里面。

2024.11.26
需要把npa_measure2_6.py生成的2号结果（最后为data2.txt）看一下然后拟合一下，关键就是p<0.5这部分和theta之间的关系。

2024.11.28
我也不想创建那么多文件夹。
test4_npamatrix: 开始尝试构造任意层的npa矩阵。
里面的函数都不是正式功能。
    /function1: 功能1，构造根据层数的测量算子。 具体功能请参考代码.md
        generate_operators1.py: 还是不对，待修改。
        stringtest.py: 根据层数layer，递归生成测量算子字符串组合，但是没排序没优化。
        stringtest2.py: 尝试优化字符串。已经优化+排序过了。----------------------------用这个
        segment.py: 尝试将测量算子字符串分割成I,A0,B0,A1,B1,5个部分。
        matrixtest.py: 尝试拼接成矩阵。
        matrixtest2.py: 尝试找索引矩阵的项出现次数和相同项的位置。除了I。如果出现任何问题，都是没引用stringtest2.py的函数。 还是直接用的layer=2.---------------用这个，暂时
        sdptest.py: 尝试构造NPA矩阵并用SDP求解。
test4/npaPure2.py: 我不敢相信sdptest.py的结果是2，而不是2倍根号2，所以又写了个纯粹的1+AB层的npa。
    Optimal value: 2.8284269678163128
    gamma[1, 3]: 0.7071067422855023
    gamma[1, 4]: 0.7071067417018632
    gamma[2, 3]: 0.7071067420394145
    gamma[2, 4]: -0.7071067417895329   这才是目标值。
        把stringtest2.py和matrixtest2.py的一些print都注释掉了，这样sdptest.py能少点重复输出

2024.12.4
先不管test4了。
test3/pqalpha/npaPure2_bianli.py: 顾名思义，遍历p,q,alpha（没错这里是alpha），然后矩阵不对劲的时候不输出。
输出结果在npa_bianli.txt里面
test3/pqalpha: 顾名思义2，不用theta而是alpha代入了。
                TODO： 1. 使用p,q,alpha计算theta, beta2, 以及公式涉及到的mu1,mu2
                      2. 将计算好的参数代入：A14, 原方程， NPA。
                      Q： beta2求不出来合适的结果。
test3/npaPure2.py: 请与上面test4文件夹的作区分。
                   只输入p,q,alpha，运行npa。
calculate_beta_withalpha.py: 呃，算不出来合适的beta2. 太小了！

2024.12.9
calculate_beta2.py: 又写了一个算theta和beta2的。怎么这个看起来就没问题呢？
                    加入了额外计算mu1，mu1范围在[0,pi/2]就行。

calculate_all.py: 计算theta和beta2后，计算sinmu1,sinmu2,cosmu1,cosmu2.
p = 0.55, q = 0.6, alpha = 0.1

2024.12.10
calculate_all2.py: 尝试在计算theta,beta2的时候不要过于接近0. 因为要修改的内容太多所以单独写了一个文件。     （这就和calculate_beta_withalpha.py遇到的问题一样了啊难绷）
test3/pqalpha/measurement: 测量合集
test3/pqalpha/measurement/theta_calculator.py: ...

2024.12.17
test4_npamatrix/new: 想写一个新的矩阵，包括：1+ab+aa， 用投影算子，etc。
test4_npamatrix/new/npaAAB.py: 1+ab+aab的矩阵，
test4_npamatrix/new/npaPure3.py: （别看了你写不出来的）

2024.12.19-20
关于npa验证，请使用vscode的julia代码。想照搬请改天再说。
完了又新建文件夹了。
test/new: 从这个文件夹开始，没有npa代码，只有验证理论值。
test/new/ezcalculate.py: 计算theta=0.5, theta!=0.5时pij=1, p00=p01=xxx + p10=p11=1【有问题】, q=0.5, q!=0.5的各种情况的理论值。
test/new/generateJuliaText.py: 懒人使用p,q时生成julia代码的工具。
test/new/calculateThetaBeta.py: 功能和calculate_all2.py冲突，建议只保留一个。     这个要用来计算A14，还得改。
                                这个改成了输入pij而不是p,q.

2024.12.23
tired.
calculateall2.py有遍历版本吗？

calculate_all2.py是基于p*q的，calculateThetaBeta.py是基于pij的。（为什么他知道我要说什么）

2024.12.24
test/new/calculateThetaBetaBianli.py: 拿来结合julia的NPA测试的，输出A14.
test/new/comparetxt.py:理论值和实际值。

2025.1.2
test/new/遍历with更小步长.py：你就是闲的。当然我劝你别运行。
test/new/遍历withp10=p11=1.py：因为开始的时候发现p00=p01=beta的时候好像不满足全部的p00,p01取值，还是得判断alpha和p00的取值范围。
                                结果在lilunBianlip10p111.txt。
test/new/abc.py:我应该使用abc来对比的吧.....谁知道呢。就这个生成了“理论实际.txt”. 所以没用上comparetxt.py【老问题，又全被跳过了难绷】


2025.1.14
1. p00>=p01>=p10>=p11, p11 = min pij
2. beta2为已知值，满足1SDI前提（之前的都是DI也就是让beta2未知）
test/new2/测试pij.py: 以0.1步长，输出范围(0,1]的pij。

--------------------------------------
IQ:
    理论值： lambda max
    实际值： NPA
ILHS: 理论1的公式
ILHV: alpha + p00 + p01 + p10 - p11
--------------------------------------
lambda: \[
\lambda = \sqrt{(p_{00} + p_{10} \cos \beta_2)^2 + (p_{10} \sin \beta_2 \sin 2\theta)^2} + \sqrt{(p_{01} - p_{11} \cos \beta_2)^2 + (p_{11} \sin \beta_2 \sin 2\theta)^2}
+ \left(\frac{p_{10}^2}{\sqrt{(p_{00} + p_{10} \cos \beta_2)^2 + (p_{10} \sin \beta_2 \sin 2\theta)^2}} + \frac{p_{11}^2}{\sqrt{(p_{01} - p_{11} \cos \beta_2)^2 + (p_{11} \sin \beta_2 \sin 2\theta)^2}}\right) \sin^2 \beta_2 \cos^2 2\theta
\]

import math

def lambda_expression(p00, p01, p10, p11, beta2, theta):
    term1 = math.sqrt((p00 + p10 * math.cos(beta2))**2 + (p10 * math.sin(beta2) * math.sin(2 * theta))**2)
    term2 = math.sqrt((p01 - p11 * math.cos(beta2))**2 + (p11 * math.sin(beta2) * math.sin(2 * theta))**2)

    alpha_term1 = p10**2 / math.sqrt((p00 + p10 * math.cos(beta2))**2 + (p10 * math.sin(beta2) * math.sin(2 * theta))**2)
    alpha_term2 = p11**2 / math.sqrt((p01 - p11 * math.cos(beta2))**2 + (p11 * math.sin(beta2) * math.sin(2 * theta))**2)

    alpha = (alpha_term1 + alpha_term2) * (math.sin(beta2)**2) * (math.cos(2 * theta)**2)

    return term1 + term2 + alpha

-----------------------------------------------------------
new2/bianliLambda1.py: 遍历p00,p01,p10,p11,输出lambda1的值。lambda1就是上面这个公式，把A5的alpha代入里面。
                        需要注意的是，这次遍历theta，指定beta2. （前者小于pi/4， 后者小于pi/2）
                        暂定beta2为30,45,60度。
                        输出LHS=理论1公式。
                        如果lambda（IQ）小于LHS，标签为1. lambdaLessThanLhs=1，并输出差值lhs-lambda。（标签为0时此数值为-1）
                        输出LHV = 经典值。
                        如果lambda小于LHV，标签为1. lambdaLessThanLhv=1，并输出差值lhv-lambda。（标签为0时此数值为-1）
输出案例：
p00=1.0, p01=1.0, p10=1.0, p11=0.6, beta2=0.79, theta=0.10, lambda=2.8840, alpha=0.5893, lhs=2.8860, lhv=2.9893,
lambdaLessThanLhs=1, lambdaLessThanLhv=1, lhs-lambda=0.001985789642386049, lhv-lambda=0.10524963765795947
（所有结果都在bianliLambda11.txt里面，然后代码已经恢复到不输出txt的版本。）
（最新加入LHV对比的在bianliLambda12.txt）----不一定啊
（最新加入LHS,LHV差值的在bianliLambda13.txt）

new2/bianliLambdaPrint.py: 实际上就是bianliLambda1.py但是打印，因为懒得先改成打印后还原回去了。

----------------------------------------------------------------------------------------------------------------------
2025.1.20
test/new3matrix: 计算Bell算子矩阵，然后找最大特征值，验证特征向量是cos00+sin11
test/new3matrix/belloperatormatrix.py: 生成Bell算子矩阵
        beta2 in (30--0.52359877559 45--0.78539816339 60--1.0471975512)
        theta in 0 - 0.78539816339
               /贝尔算子矩阵特征值.py:包含了生成矩阵的代码，然后提取最大特征值，及其对应的特征向量
               Q：不是cos00+sin11.

2025.1.24
把new/理论值遍历的txt全放到桌面的新建文件夹了。
new2的也一样。
